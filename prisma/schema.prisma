// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  name            String?
  username        String?     @unique
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            String?
  accounts        Account[]
  sessions        Session[]
  updatedAt       DateTime      @updatedAt
  createdAt       DateTime      @default(now())
}

model Account {
  id                 Int         @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 Int         @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Destination {
  did         Int       @id @default(autoincrement())
  name        String    @unique
  country     String
  overview    String?   @db.Text
  imageUrl    String?
  packages    Package[]
  cities      City[]
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}

model City {
  cid           Int          @id @default(autoincrement())
  name          String       @unique
  description   String       @db.Text
  imageUrl      String?
  destination   Destination  @relation(fields: [destinationId], references: [did])
  destinationId Int
  packages      Package[]
  hotels        Hotel[]
  createdAt   DateTime  @default(now())
}

model Hotel {
  hid         Int           @id @default(autoincrement())
  name        String       
  description String
  starRating  Int
  city        City          @relation(fields: [cityId], references: [cid])
  cityId      Int
  prices      PackageHotelPrice[]
  images      HotelImage[]
  createdAt   DateTime  @default(now())
}

model HotelImage {
  hiid        Int     @id @default(autoincrement())
  url         String
  caption     String?
  hotel       Hotel   @relation(fields: [hotelId], references: [hid])
  hotelId     Int
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}

model Package {
  pid           Int          @id @default(autoincrement())
  name          String       @unique
  basePrice     Float
  durationDays  Int
  description   String
  destination   Destination  @relation(fields: [destinationId], references: [did])
  destinationId Int
  city          City         @relation(fields: [cityId], references: [cid])
  cityId        Int
  itineraries   Itinerary[]
  hotelPrices   PackageHotelPrice[]
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}

model PackageHotelPrice {
  phid       Int     @id @default(autoincrement())
  price      Float
  hotel      Hotel   @relation(fields: [hotelId], references: [hid])
  hotelId    Int
  package    Package @relation(fields: [packageId], references: [pid])
  packageId  Int
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  @@unique([packageId, hotelId])
}

model Itinerary {
  itid        Int       @id @default(autoincrement())
  day         Int
  title       String
  details     String     @db.Text
  package     Package    @relation(fields: [packageId], references: [pid])
  packageId   Int
  highlights  Highlight[]
  inclusions  Inclusion[]
  exclusions  Exclusion[]
  places      ItineraryPlace[]
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}

model ItineraryPlace {
  itpid       Int                  @id @default(autoincrement())
  name        String
  description String               @db.Text
  itinerary   Itinerary            @relation(fields: [itineraryId], references: [itid])
  itineraryId Int
  images      ItineraryPlaceImage[]
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}

model ItineraryPlaceImage {
  ipiid    Int              @id @default(autoincrement())
  url      String
  caption  String?
  place    ItineraryPlace   @relation(fields: [placeId], references: [itpid])
  placeId  Int
}

model Highlight {
  hlid        Int       @id @default(autoincrement())
  text        String    @unique
  itinerary   Itinerary @relation(fields: [itineraryId], references: [itid])
  itineraryId Int
}

model Inclusion {
  lid         Int       @id @default(autoincrement())
  text        String    @unique
  itinerary   Itinerary @relation(fields: [itineraryId], references: [itid])
  itineraryId Int
}

model Exclusion {
  eid         Int       @id @default(autoincrement())
  text        String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [itid])
  itineraryId Int
}
